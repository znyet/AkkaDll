https://doc.akka.io/docs/akka/snapshot/event-bus.html?language=java
https://blog.csdn.net/linuxarmsummary/article/details/79399672

同Akka的本地Actor的生命周期Hook相同,Akka为远程的Actor申明了很多的事件.我们可以监听这些远程调用中发生的事件,也可以订阅这些事件.只需要在ActorSystem.eventStream中为下面的事件增加注册监听器即可. 需要注意的是如果要订阅任意的远程事件,是订阅RemotingLifecycleEvent,如果只订阅涉及链接的生命周期,需要订阅akka.remote.AssociationEvent.

DisassociatedEvent : 链接结束事件,这个事件包含了链接方向以及参与方的地址.
AssociatedEvent : 链接成功建立事件,这个事件包含了链接方向以及参与方的地址.
AssociationErrorEvent : 链接相关错误事件,这个事件包含了链接方向以及参与方的地址以及错误的原因.
RemotingListenEvent : 远程子系统准备好接受链接时的事件,这个事件包含了链接方向以及参与方的地址.
RemotingShutdownEvent : 远程子系统被关闭的事件
RemotingErrorEvent : 远程相关的所有错误


=============================================

https://getakka.net/articles/utilities/event-bus.html


EventBus
Subscribing to Dead letter messages
The following example demonstrates the capturing of dead letter messages generated from a stopped actor. The dedicated actor will output the message, sender and recipient of the captured dead letter to the console.

void Main()
{
    // Setup the actor system
    ActorSystem system = ActorSystem.Create("MySystem");

    // Setup an actor that will handle deadletter type messages
    var deadletterWatchMonitorProps = Props.Create(() => new DeadletterMonitor());
    var deadletterWatchActorRef = system.ActorOf(deadletterWatchMonitorProps, "DeadLetterMonitoringActor");

    // subscribe to the event stream for messages of type "DeadLetter"
    system.EventStream.Subscribe(deadletterWatchActorRef, typeof(DeadLetter));  

    // Setup an actor which will simulate a failure/shutdown
    var expendableActorProps = Props.Create(() => new ExpendableActor());
    var expendableActorRef = system.ActorOf(expendableActorProps, "ExpendableActor");

    // simulate the expendable actor failing/stopping
    expendableActorRef.Tell(Akka.Actor.PoisonPill.Instance);

    // try sending a message to the stopped actor
    expendableActorRef.Tell("another message");

}

// A dead letter handling actor specifically for messages of type "DeadLetter"
public class DeadletterMonitor : ReceiveActor
{

    public DeadletterMonitor()
    {
        Receive<DeadLetter>(dl => HandleDeadletter(dl));
    }

    private void HandleDeadletter(DeadLetter dl)
    {
        Console.WriteLine($"DeadLetter captured: {dl.Message}, sender: {dl.Sender}, recipient: {dl.Recipient}");
    }
}

// An expendable actor which will simulate a failure
public class ExpendableActor : ReceiveActor {  }
sample capture

DeadLetter captured: another message, sender: [akka://MySystem/deadLetters], recipient: [akka://MySystem/user/ExpendableActor#1469246785]
Subscribing to messages of type "string"
var system = ActorSystem.Create("MySystem");
var subscriber = system.ActorOf<SomeActor>();
//Subscribe to messages of type string
system.EventStream.Subscribe(subscriber,typeof(string));
//send a message
system.EventStream.Publish("hello"); //this will be forwarded to subscriber
